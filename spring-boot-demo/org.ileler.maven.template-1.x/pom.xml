<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.ileler</groupId>
        <artifactId>org.ileler.maven.dependencies</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>
    <name>org.ileler.maven.template</name>
    <groupId>org.ileler</groupId>
    <artifactId>org.ileler.maven.template</artifactId>
    <packaging>pom</packaging>

    <properties>
        <custom.package.skipCopyLib>true</custom.package.skipCopyLib>
        <custom.package.mainClass>${start-class}</custom.package.mainClass>
        <custom.package.insideGroupIds>com.mpr</custom.package.insideGroupIds>
        <custom.package.libPath>${project.build.directory}/lib</custom.package.libPath>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <timestamp>${maven.build.timestamp}</timestamp>
        <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
        <java.version>1.8</java.version>
        <skipTests>true</skipTests>

        <service.dir>.</service.dir>
        <service.bnum>1</service.bnum>
        <service.tail>-untail</service.tail>
        <service.stype>restart</service.stype>
        <service.debug>undebug</service.debug>
        <service.profile>dev</service.profile>
        <service.fromFile>${project.build.directory}/${project.build.finalName}.${project.packaging}</service.fromFile>
        <service.toFile>${project.build.finalName}.${project.packaging}</service.toFile>
        <service.spring.arg></service.spring.arg>
        <service.command>
            <![CDATA[./sbs ${service.stype} -num ${service.bnum} ${service.tail} ${service.arg} -debug ${service.debug}${service.dport} --server.port=${service.port} --spring.profiles.active=${service.profile} ${service.spring.arg}]]></service.command>
        <sbs>
            <![CDATA[
#EOF
#!/bin/bash
# Author: ileler@qq.com

_getJarName() {
	JAR_NAME=

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-jar)
				JAR_NAME=\`cd \\\`dirname .\\\`; pwd\`/\$2
				shift;
				;;
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		esac
		shift
	done

	if [ -z "\$JAR_NAME" ]
	then
		JAR_NAME=\$(ls -t \$CURRENT_DIR/*.jar | head -n 1)
	fi
	echo \$JAR_NAME
}

_stop() {
	JAR_NAME=\`_getJarName "\$@"\`
	PID=\`jps -ml | grep \$JAR_NAME | grep -o ^[0-9]*\`
	if [ -n "\$PID" ]; then kill -9 \$PID; fi;
	printf "\nkill [\$PID](\$JAR_NAME)\n"
}

_start() {

	echo "start args[\$@]"
	JAR_NAME=\`_getJarName "\$@"\`
	VM_OPTS=
	CLEAN_FLAG=
	NO_START_FLAG=
	DEBUG_FLAG=
	DEBUG_PORT=8000
	UNTAIL_FLAG=
	SUSPEND=n
	ADDITIONAL_ARGS=

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-debug)
				DEBUG_FLAG=1
				DEBUG_PORT=\$2
				shift;
				;;
		-clean)
				CLEAN_FLAG=1
				;;
		-untail)
				UNTAIL_FLAG="-untail"
				;;
		-show)
				NO_START_FLAG=1
				;;
		-vmoptions)
				VM_OPTS=\$2
				shift;
				;;
		-suspend)
				SUSPEND=y
				;;
		-jar)
				shift;
				;;
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		*)
				ADDITIONAL_ARGS="\$ADDITIONAL_ARGS \$1"
				;;
		esac
		shift
	done

    if [ "\$DEBUG_PORT" -gt 0 ] 2>/dev/null ; then DEBUG_FLAG=\$DEBUG_FLAG; else DEBUG_FLAG=; fi;
	if [ "\$DEBUG_FLAG" ]
	then
		DEBUG_OPTS=" \
			-Xdebug \
			-Xrunjdwp:transport=dt_socket,address=\$DEBUG_PORT,server=y,suspend=\$SUSPEND"
	fi

	if [ "\$CLEAN_FLAG" ]
	then
        rm -rf \$CURRENT_DIR/nohup*
		rm -rf \$CURRENT_DIR/vmlog
		rm -rf \$CURRENT_DIR/logs
		rm -rf \$CURRENT_DIR/tmp
	fi

	TMP_DIR=\$CURRENT_DIR/tmp
	EXEC="\$JAVA_HOME/bin/java \
			\$JAVA_OPTS \
			\$DEBUG_OPTS \
			\$JMX_OPTS \
			-XX:+HeapDumpOnOutOfMemoryError \
			-XX:ErrorFile=\$CURRENT_DIR/vmlog/error.log \
			-XX:HeapDumpPath=\$CURRENT_DIR/vmlog/heap_dump.hprof \
			\$VM_OPTS \
			-Djava.io.tmpdir=\$TMP_DIR \
			-classpath \$CLASSPATH \
			-jar \$JAR_NAME \
			\$ADDITIONAL_ARGS"
	printf "\nexec command\n \n\t[\$EXEC] \n\nin \n\n\t[\$CURRENT_DIR] \n\ndir.\n"
	if [ -z "\$NO_START_FLAG" ]
	then
		mkdir -p \$TMP_DIR
		cd \$CURRENT_DIR
		:>./nohup.out
		target_cmd="nohup \$EXEC >> ./nohup.out 2>&1 &"
		echo "\$target_cmd" > start.last
		_recovery \$UNTAIL_FLAG "\$@"
	fi
}

_recovery() {

	echo "recovery args[\$@]"
	UNTAIL_FLAG=

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		-untail)
				UNTAIL_FLAG=1
				;;
		esac
		shift
	done

	cd \$CURRENT_DIR

	target_cmd=\$(cat ./start.last)
	eval \$target_cmd
	read -p "[\$!]" -t 3
	printf "\nexec success.\n"
	echo \$! > pid
	if [ -z "\$UNTAIL_FLAG" ]
	then
		printf "\ntail output...\n"
		tail -f ./nohup.out
	fi

}

_backup() {

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		esac
		shift
	done

	cd \$CURRENT_DIR
	mkdir -p backup && cd backup && (find . -maxdepth 1 -type d -ctime +30 -exec rm -rf {} \;) && cd ../;

	cd \$CURRENT_DIR
	BACKUPDIR=\$CURRENT_DIR/backup/\`date '+%G%m%d%H%M%S'\`
	mkdir -p backup && mkdir \$BACKUPDIR && cp -R nohup* vmlog logs tmp *.jar \$BACKUPDIR

}

_bpstart() {

	NUM=1

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-num)
				NUM=\$2
				shift;
				;;
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		esac
		shift
	done

    cd \$CURRENT_DIR/backup
	target=\`ls -t | head -\$NUM | tail -1\`
	cd \$target && cp -Rf * ../../ && cd ../../

}

#CURRENT_DIR=\`cd \\\`dirname "\$0"\\\`/; pwd\`
CURRENT_DIR=\`cd \\\`dirname .\\\`; pwd\`

COMMAND=\$1
if [ -n "\$COMMAND" ]; then shift; fi;

if [ "\$COMMAND" = "start" ]
then
	_start "\$@"
elif [ "\$COMMAND" = "stop" ]
then
	_stop "\$@"
elif [ "\$COMMAND" = "restart" ]
then
	_stop "\$@"
	read -p "..." -t 3
	_start "\$@"
elif [ "\$COMMAND" = "backup" ]
then
	_backup "\$@"
elif [ "\$COMMAND" = "recovery" ]
then
	_stop "\$@"
	read -p "..." -t 3
	_recovery "\$@"
elif [ "\$COMMAND" = "bpstart" ]
then
	_stop "\$@"
	read -p "..." -t 3
	_bpstart "\$@"
	_start "\$@"
else
	if [ -n "\$COMMAND" ]
	then
		echo "Unknown command: \${COMMAND}\n"
	fi
	printf "
Usage: sbs [COMMAND] [ARGS]...
  COMMAND:
    stop\t\t  stop jar
    start\t\t  start jar
    restart\t\t  restart jar
  ARGS:
    -d\t\t\t  set work dir
    -jar\t\t  set jar file path
    -debug [port]\t  set debug model with port, port default 8000
    -vmoptions [vmopts]\t  set jvm options
    -show\t\t  show target command without exec
    -clean\t\t  clean logs,nohup.out,vmlog file or dir
    *\t\t\t  other parameters will be appended to the end of the command
  eg:
    \$SHELL ./sbs restart -clean -vmoptions \"-Xms300m -Xmx300m\" -debug 8003 --server.port=11003
	\n"
fi
EOF
]]>
        </sbs>
        <!--<install>-->
            <!--<![CDATA[-->
<!--#EOF-->
<!--#!/usr/bin/env python-->
<!--# -*- coding: utf-8 -*- -->
<!--# Author: ileler@qq.com-->
<!--import os-->
<!--import sys-->
<!--import zipfile-->
<!--from shutil import copyfile-->

<!--err = None;-->
<!--args = sys.argv[1:];-->
<!--target = args[0] if len(args) > 0 else None;-->
<!--runJar = args[1] if len(args) > 1 else None;-->
<!--libPath = args[2] if len(args) > 2 else None;-->
<!--cpPrefix = args[3] if len(args) > 3 else None;-->

<!--#args check-->
<!--if (runJar is None):-->
    <!--err = 'runJar is invalid';-->
<!--elif (libPath is None):-->
    <!--err = 'libPath is invalid';-->
<!--elif (not os.access(target+'/'+runJar, os.F_OK) and not os.access(libPath+'/'+runJar, os.F_OK)):-->
    <!--err = libPath+'/'+runJar+' invalid';-->
<!--if (err):-->
    <!--print err;-->
    <!--print 'Usage: ' + sys.argv[0] + ' target runJar libPath cpPrefix';-->
    <!--sys.exit();-->

<!--if (not os.path.exists(target)):-->
    <!--os.makedirs(target);-->
<!--if (os.path.exists(libPath+'/'+runJar)):-->
    <!--copyfile(libPath+'/'+runJar, target + '/' + runJar);-->
    <!--print 'install ' + runJar + ' success.'-->

<!--#mkdir prefix-->
<!--if (cpPrefix is not None and not os.path.exists(target + '/' + cpPrefix)):-->
    <!--os.makedirs(target + '/' + cpPrefix);-->

<!--#resolve classpath-->
<!--with zipfile.ZipFile(target + '/' + runJar, 'r') as jar:-->
    <!--with jar.open('META-INF/MANIFEST.MF') as mf:-->
        <!--start = False;-->
        <!--cpstr = '';-->
        <!--for line in mf:-->
            <!--if (start and not line.startswith(' ')):-->
                <!--break;-->
            <!--if (not start and line.startswith('Class-Path:')):-->
                <!--start = True;-->
                <!--line = line[11:];-->
            <!--if (start):-->
                <!--cpstr += line[1:].replace('\r', '').replace('\n', '');-->
        <!--jars = cpstr.split(' ');-->
    <!--ejars = '/';-->
    <!--for member in jar.namelist():-->
        <!--if (not member.startswith('com.mpr.lib')):-->
            <!--continue;-->
        <!--filename = os.path.basename(member)-->
        <!--if (not filename):-->
            <!--continue;-->
        <!--ejars += filename + '/';-->
        <!--print 'extract ' + filename + ' success.'-->
        <!--(lambda f, d: (f.write(d), f.close()))(open(r'' + target + '/' + cpPrefix + '/' + filename, 'wb'), jar.read(member))-->

<!--#download jars-->
<!--err = '';-->
<!--for jar in jars:-->
    <!--if (cpPrefix is not None):-->
        <!--jar = jar[len(cpPrefix):];-->
    <!--srcFile = libPath + '/' + jar;-->
    <!--destFile = target + '/' + cpPrefix + '/' + jar;-->
    <!--if (jar in ejars):-->
        <!--continue;-->
    <!--if (not os.access(srcFile, os.F_OK)):-->
        <!--err += jar + ' unexists\n';-->
        <!--continue;-->
    <!--copyfile(srcFile, destFile);-->
    <!--print 'install ' + jar + ' success.'-->
<!--if (err):-->
    <!--print '\n' + err;-->
    <!--print '\ninstall failed.';-->
<!--else:-->
    <!--print '\ninstall success.';-->
<!--EOF-->
<!--]]>-->
        <!--</install>-->
        <!--<install.libPath>.</install.libPath>-->
        <!--<install.libPrefix>lib</install.libPrefix>-->
    </properties>

    <distributionManagement>
        <!--<repository>-->
            <!--<id>releases</id>-->
            <!--<name>MPRSP Release Repository</name>-->
            <!--<url>http://172.16.6.17:8081/repository/maven-releases/</url>-->
        <!--</repository>-->
        <!--<snapshotRepository>-->
            <!--<id>snapshots</id>-->
            <!--<name>MPRSP Snapshots</name>-->
            <!--<url>http://172.16.6.17:8081/repository/maven-snapshots/</url>-->
        <!--</snapshotRepository>-->
        <repository>
            <id>releases-old</id>
            <name>MPRSP Release Repository</name>
            <url>http://172.16.6.17:8080/nexus/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>snapshots-old</id>
            <name>MPRSP Snapshots</name>
            <url>http://172.16.6.17:8080/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <pluginRepositories>
        <pluginRepository>
            <id>local.repository</id>
            <name>SpringSource Enterprise Bundle Repository - Releases</name>
            <url>http://172.16.6.17:8081/repository/maven-public/</url>
        </pluginRepository>
        <pluginRepository>
            <id>com.springsource.repository.bundles.release</id>
            <name>SpringSource Enterprise Bundle Repository - Releases</name>
            <url>http://repository.springsource.com/maven/bundles/release</url>
        </pluginRepository>
        <pluginRepository>
            <id>eclipse.virgo.build.bundles.release</id>
            <name>Eclipse Virgo Build</name>
            <url>http://build.eclipse.org/rt/virgo/maven/bundles/release</url>
        </pluginRepository>
        <pluginRepository>
            <id>com.springsource.repository.bundles.external</id>
            <name>SpringSource Enterprise Bundle Repository - External Bundle Releases</name>
            <url>http://repository.springsource.com/maven/bundles/external</url>
        </pluginRepository>
    </pluginRepositories>

    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <goals>
                                <goal>build-info</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <additionalProperties>
                            <svn>${buildNumber}.</svn>
                            <time>${timestamp}.</time>
                        </additionalProperties>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>buildnumber-maven-plugin</artifactId>
                    <version>1.4</version>
                    <executions>
                        <execution>
                            <phase>validate</phase>
                            <goals>
                                <goal>create</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <doCheck>false</doCheck>
                        <doUpdate>true</doUpdate>
                        <shortRevisionLength>5</shortRevisionLength>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                        <encoding>UTF-8</encoding>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <extensions>
            <extension>
                <groupId>com.mpr.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>3.0.1-SNAPSHOT</version>
            </extension>
        </extensions>

        <plugins>
            <plugin>
                <groupId>com.mpr.mojo</groupId>
                <artifactId>wagon-maven-plugin</artifactId>
                <version>1.1-SNAPSHOT</version>
                <configuration>
                    <serverId>${service.sid}</serverId>
                    <fromFile>${service.fromFile}</fromFile>
                    <toFile>${service.dir}/${service.toFile}</toFile>
                    <commands>
                        <!--<command>-->
                            <!--<![CDATA[cd ${service.dir} && cat > install << EOF && export CURRENT_DIR=`cd \`dirname .\`; pwd` && bash &#45;&#45;login -c 'cd $CURRENT_DIR && echo $PATH && chmod u+x ./install && ./install . ${service.toFile} ${install.libPath} ${install.libPrefix} &> install.log';${install}]]></command>-->
                        <command>
                            <![CDATA[cd ${service.dir} && cat > sbs << EOF && export CURRENT_DIR=`cd \`dirname .\`; pwd` && bash --login -c 'cd $CURRENT_DIR && echo $PATH && chmod u+x ./sbs && ${service.command}';${sbs}]]></command>
                    </commands>
                    <displayCommandOutputs>true</displayCommandOutputs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <delimiters>
                        <delimiter>@</delimiter>
                    </delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>
        </plugins>

    </build>

    <profiles>
        <profile>
            <id>custom-package</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <file>
                    <exists>src/main/resources/bootstrap.yml</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <!--<plugin>-->
                        <!--<groupId>org.codehaus.mojo</groupId>-->
                        <!--<artifactId>buildnumber-maven-plugin</artifactId>-->
                    <!--</plugin>-->
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-lib</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>
                                        ${custom.package.libPath}
                                    </outputDirectory>
                                    <excludeGroupIds>${custom.package.insideGroupIds}</excludeGroupIds>
                                    <skip>${custom.package.skipCopyLib}</skip>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-com.mpr.lib</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>
                                        ${project.build.directory}/classes/inside.lib
                                    </outputDirectory>
                                    <excludeGroupIds>*</excludeGroupIds>
                                    <includeGroupIds>${custom.package.insideGroupIds}</includeGroupIds>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-jar-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-jar</id>
                                <phase/>
                            </execution>
                            <execution>
                                <id>custom-package</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <configuration>
                                    <archive>
                                        <manifest>
                                            <addClasspath>true</addClasspath>
                                            <classpathPrefix>lib/</classpathPrefix>
                                            <useUniqueVersions>false</useUniqueVersions>
                                            <mainClass>${custom.package.mainClass}</mainClass>
                                        </manifest>
                                    </archive>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default</id>
                                <phase/>
                            </execution>
                            <execution>
                                <id>custom-repackage</id>
                                <goals>
                                    <goal>build-info</goal>
                                    <goal>repackage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <reporting>
        <plugins>
            <!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.6</version> <reportSets> <reportSet> <reports> <report>index</report>
                <report>dependencies</report> <report>project-team</report> </reports> </reportSet>
                </reportSets> </plugin> -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
                <reportSets>
                    <reportSet><!-- by default, id = "default" -->
                        <reports><!-- select non-aggregate reports -->
                            <report>javadoc</report>
                            <report>test-javadoc</report>
                        </reports>
                    </reportSet>
                    <reportSet>
                        <id>aggregate</id><!-- aggregate reportSet, for pom with modules -->
                        <inherited>false</inherited><!-- don't run aggregate in child modules -->
                        <reports>
                            <report>aggregate</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>2.10</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <targetJdk>1.7</targetJdk>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <aggregate>true</aggregate>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>2.5.2</version>
                <configuration>
                    <xmlOutput>true</xmlOutput>
                    <effort>Max</effort>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

</project>