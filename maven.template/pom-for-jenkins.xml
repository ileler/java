<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>temp</groupId>
    <artifactId>temp.jenkins.template</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>AgileDev Maven Template</name>

    <properties>
        <service.dir>.</service.dir>
        <service.bnum>1</service.bnum>
        <service.tail>-untail</service.tail>
        <service.stype>restart</service.stype>
        <service.debug>undebug</service.debug>
        <service.profile>dev</service.profile>
        <service.fromFile>${project.build.directory}/${project.build.finalName}.${project.packaging}</service.fromFile>
        <service.toFile>${project.build.finalName}.${project.packaging}</service.toFile>
        <service.spring.arg></service.spring.arg>
        <service.command>
            <![CDATA[./sbs ${service.stype} -num ${service.bnum} ${service.tail} ${service.arg} -debug ${service.debug}${service.dport} --server.port=${service.port} --spring.profiles.active=${service.profile} ${service.spring.arg}]]></service.command>
        <sbs>
            <![CDATA[
#EOF
#!/bin/bash
# Author: ileler@qq.com

_getJarName() {
	JAR_NAME=

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-jar)
				JAR_NAME=\`cd \\\`dirname .\\\`; pwd\`/\$2
				shift;
				;;
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		esac
		shift
	done

	if [ -z "\$JAR_NAME" ]
	then
		JAR_NAME=\$(ls -t \$CURRENT_DIR/*.jar | head -n 1)
	fi
	echo \$JAR_NAME
}

_stop() {
	JAR_NAME=\`_getJarName "\$@"\`
	PID=\`jps -ml | grep \$JAR_NAME | grep -o ^[0-9]*\`
	if [ -n "\$PID" ]; then kill -9 \$PID; fi;
	printf "\nkill [\$PID](\$JAR_NAME)\n"
}

_start() {

	echo "start args[\$@]"
	JAR_NAME=\`_getJarName "\$@"\`
	VM_OPTS=
	CLEAN_FLAG=
	NO_START_FLAG=
	DEBUG_FLAG=
	DEBUG_PORT=8000
	UNTAIL_FLAG=
	SUSPEND=n
	ADDITIONAL_ARGS=

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-debug)
				DEBUG_FLAG=1
				DEBUG_PORT=\$2
				shift;
				;;
		-clean)
				CLEAN_FLAG=1
				;;
		-untail)
				UNTAIL_FLAG="-untail"
				;;
		-show)
				NO_START_FLAG=1
				;;
		-vmoptions)
				VM_OPTS=\$2
				shift;
				;;
		-suspend)
				SUSPEND=y
				;;
		-jar)
				shift;
				;;
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		*)
				ADDITIONAL_ARGS="\$ADDITIONAL_ARGS \$1"
				;;
		esac
		shift
	done

    if [ "\$DEBUG_PORT" -gt 0 ] 2>/dev/null ; then DEBUG_FLAG=\$DEBUG_FLAG; else DEBUG_FLAG=; fi;
	if [ "\$DEBUG_FLAG" ]
	then
		DEBUG_OPTS=" \
			-Xdebug \
			-Xrunjdwp:transport=dt_socket,address=\$DEBUG_PORT,server=y,suspend=\$SUSPEND"
	fi

	if [ "\$CLEAN_FLAG" ]
	then
        rm -rf \$CURRENT_DIR/nohup*
		rm -rf \$CURRENT_DIR/vmlog
		rm -rf \$CURRENT_DIR/logs
		rm -rf \$CURRENT_DIR/tmp
	fi

	TMP_DIR=\$CURRENT_DIR/tmp
	EXEC="\$JAVA_HOME/bin/java \
			\$JAVA_OPTS \
			\$DEBUG_OPTS \
			\$JMX_OPTS \
			-XX:+HeapDumpOnOutOfMemoryError \
			-XX:ErrorFile=\$CURRENT_DIR/vmlog/error.log \
			-XX:HeapDumpPath=\$CURRENT_DIR/vmlog/heap_dump.hprof \
			\$VM_OPTS \
			-Djava.io.tmpdir=\$TMP_DIR \
			-classpath \$CLASSPATH \
			-jar \$JAR_NAME \
			\$ADDITIONAL_ARGS"
	printf "\nexec command\n \n\t[\$EXEC] \n\nin \n\n\t[\$CURRENT_DIR] \n\ndir.\n"
	if [ -z "\$NO_START_FLAG" ]
	then
		mkdir -p \$TMP_DIR
		cd \$CURRENT_DIR
		:>./nohup.out
		target_cmd="nohup \$EXEC 2>&1 >> ./nohup.out &"
		echo "\$target_cmd" > start.last
		_recovery \$UNTAIL_FLAG "\$@"
	fi
}

_recovery() {

	echo "recovery args[\$@]"
	UNTAIL_FLAG=

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		-untail)
				UNTAIL_FLAG=1
				;;
		esac
		shift
	done

	cd \$CURRENT_DIR

	target_cmd=\$(cat ./start.last)
	eval \$target_cmd
	read -p "[\$!]" -t 3
	printf "\nexec success.\n"
	echo \$! > pid
	if [ -z "\$UNTAIL_FLAG" ]
	then
		printf "\ntail output...\n"
		tail -f ./nohup.out
	fi

}

_backup() {

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		esac
		shift
	done

	cd \$CURRENT_DIR
	mkdir -p backup && cd backup && (find . -maxdepth 1 -type d -ctime +30 -exec rm -rf {} \;) && cd ../;

	cd \$CURRENT_DIR
	BACKUPDIR=\$CURRENT_DIR/backup/\`date '+%G%m%d%H%M%S'\`
	mkdir -p backup && mkdir \$BACKUPDIR && cp -R nohup* vmlog logs tmp *.jar \$BACKUPDIR

}

_bpstart() {

	NUM=1

	while [ \$# -gt 0 ]
		do
		case \$1 in
		-num)
				NUM=\$2
				shift;
				;;
		-d)
				CURRENT_DIR=\`cd \$2; pwd\`
				shift;
				;;
		esac
		shift
	done

    cd \$CURRENT_DIR/backup
	target=\`ls -t | head -\$NUM | tail -1\`
	cd \$target && cp -Rf * ../../ && cd ../../

}

#CURRENT_DIR=\`cd \\\`dirname "\$0"\\\`/; pwd\`
CURRENT_DIR=\`cd \\\`dirname .\\\`; pwd\`

COMMAND=\$1
if [ -n "\$COMMAND" ]; then shift; fi;

if [ "\$COMMAND" = "start" ]
then
	_start "\$@"
elif [ "\$COMMAND" = "stop" ]
then
	_stop "\$@"
elif [ "\$COMMAND" = "restart" ]
then
	_stop "\$@"
	read -p "..." -t 3
	_start "\$@"
elif [ "\$COMMAND" = "backup" ]
then
	_backup "\$@"
elif [ "\$COMMAND" = "recovery" ]
then
	_stop "\$@"
	read -p "..." -t 3
	_recovery "\$@"
elif [ "\$COMMAND" = "bpstart" ]
then
	_stop "\$@"
	read -p "..." -t 3
	_bpstart "\$@"
	_start "\$@"
else
	if [ -n "\$COMMAND" ]
	then
		echo "Unknown command: \${COMMAND}\n"
	fi
	printf "
Usage: sbs [COMMAND] [ARGS]...
  COMMAND:
    stop\t\t  stop jar
    start\t\t  start jar
    restart\t\t  restart jar
  ARGS:
    -d\t\t\t  set work dir
    -jar\t\t  set jar file path
    -debug [port]\t  set debug model with port, port default 8000
    -vmoptions [vmopts]\t  set jvm options
    -show\t\t  show target command without exec
    -clean\t\t  clean logs,nohup.out,vmlog file or dir
    *\t\t\t  other parameters will be appended to the end of the command
  eg:
    \$SHELL ./sbs restart -clean -vmoptions \"-Xms300m -Xmx300m\" -debug 8003 --server.port=11003
	\n"
fi
EOF
]]>
        </sbs>
    </properties>

    <build>
        <extensions>
            <extension>
                <groupId>com.mpr.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>3.0.1-SNAPSHOT</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>com.mpr.mojo</groupId>
                <artifactId>wagon-maven-plugin</artifactId>
                <version>1.1-SNAPSHOT</version>
                <configuration>
                    <serverId>${service.sid}</serverId>
                    <fromFile>${service.fromFile}</fromFile>
                    <toFile>${service.dir}/${service.toFile}</toFile>
                    <commands>
                        <command>
                            <![CDATA[cd ${service.dir} && cat > sbs << EOF && export CURRENT_DIR=`cd \`dirname .\`; pwd` && bash --login -c 'cd $CURRENT_DIR && echo $PATH && chmod u+x ./sbs && ${service.command}';${sbs}]]></command>
                    </commands>
                    <displayCommandOutputs>true</displayCommandOutputs>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>